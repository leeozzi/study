알고리즘 분류 보고 백트래킹 찾아보다가 예제가 다 이 문제만 나와서...
depth를 인자로 받아서 쓴다! 라는 것까지 힌트 얻고 다시 도전해봄

뭔가 마지막 요소를 하나씩 뒤로 땡기면서 배열에 넣어준다는 초기 아이디어랑은 비슷한 듯

****************************************

n == 6, m == 4라고 가정

        depth == 0
        combi[0] == 1;
        visited[0] (1) = 1;    // 1은 탐색했어
        depth++;    // depth == 1
            1은 visited == 1이라서 안 돼
            2 넣어주자 -> combi[1] = 2  ----> visited[2] = 1;
            depth++;    // depth == 2
                1이랑 2는 visited == 1이라서 안 돼
                3 넣어주자 -> combi[2] = 3 ----> visited[3] = 1;
                depth++;    // depth 3
                    1이랑 2랑 3은 다 visited == 1
                    4 넣어줌 -> combi[3] = 4 ----> visited[4] = 1;
                    depth++ == m 도달 ! 출력해주고 바로 앞(depth == 3)로 돌아가

                    5 넣어줌 -> combi[3] = 5    // 4로 돼 있던 거 덮어쓰기 ----> visited[5] = 1;
                    depth++ == m 도달 ! 출력해주고 바로 앞(depth == 3)로 돌아가

                    6 넣어줌 -> combi[3] = 6   // 5로 돼 있던 거 덮어쓰기 ----> visited[6] = 1;
                    depth++ == m 도달 ! 출력해주고 바로 앞(depth == 3)로 돌아가

                    !!! 모든 숫자가 다 visited == 1 이야
                    - 그럼 visited 배열 초기화 해주고
                    - f(depth == 2) 호출

                combi = {1,2} 이고 1, 2, 3 visited == 1인 상태
                4 넣어주자 -> combi[2] = 4 ---->  visited[4] = 1;
                depth++;    // depth 3
                    1 2 3 4 visited == 1
                    5 넣어줌 -> combi[3] = 5 ----> visited[5] = 1;
                    depth++ == m 도달 ! 출력해주고 바로 앞(depth == 3)로 돌아가

                    1 2 3 4 5 visited == 1
                    6 넣어줌 -> combi[3] = 6 ----> visited[6] = 1;
                    depth++ == m 도달 ! 출력해주고 바로 앞(depth == 3)로 돌아가

                    !!! 모든 숫자가 다 visited == 1 이야
                    - 그럼 visited 배열 초기화 해주고
                    - f(depth == 2) 호출


*********************


dfs(4, 2, 0) 호출 ★
	- depth 0 != 2 라서 조건문 패스
	- i = 0 일 때
		- visited[i : 0] != 1 이므로
			- combi[depth : 0] = arr[i : 0]		// combi {1,0}
			- visited[i : 0] = 1;	// visited {1,0,0,0}
			- dfs(4, 2, 1) 호출 ★
				- depth 1 != 2 라서 출력 조건문 패스
				- i = 0 일 때
					- visited[i : 0] == 1 이므로 조건문 돌지 않음
				- i = 1 일 때
					- visited[i : 1] != 1 이므로
						- combi[depth : 1] = arr[i : 1]		// combi {1, 2}
						- visited[i : 1] = 1;	// visited {1, 1, 0, 0}
						- dfs(4, 2, 2) 호출 ★
							- depth 2 == 2 라서 출력 후 종료
				- i = 2 일 때
					- visited[i : 2] != 1 이므로
						- combi[depth : 1] = arr[i : 2]		// combi {1,3}
						- visited[i : 2] = 1;	// visited {1, 1, 1, 0}
						-dfs(4, 2, 2) 호출 ★
							- depth 2 == 2 라서 출력 후 종료
				- i = 3 일 때
					- visited[i : 3] != 1 이므로
						- combi[depth : 1] = arr[i : 3]		// combi {1,4}
						- visited[i : 3] = 1;	// visited {1, 1, 1, 1}
						-dfs(4, 2, 2) 호출 ★
							- depth 2 == 2 라서 출력 후 종료

				***** 반복문 끝남 >> visited 배열 초기화 !! 	// visited {0,0,0,0}
	- i = 1 일 때
		- visited[i : 1] != 1 이므로
			- combi[depth : 0] = arr[i : 1]		// combi {2, 0}
			- visited[i : 1] = 1;	// visited {0, 1, 0, 0}
			- dfs(4, 2, 1) 호출 ★
				- depth 1 != 2 라서 출력 조건문 패스
				- i = 0 일 때
					- visited[i : 0] != 1 이므로
						- combi[depth : 1] = arr[i : 0]		// combi {2, 1}

	.
	.
	.


*********************

dfs(4,4,0) 호출
	- depth 0 != 4 이므로 출력 조건문 패스
	- i = 0 일 때
		- visited[i = 0] != 1 이므로
			- combi[0] = arr[i = 0]	// combi {1, 0, 0, 0}
			- visited[i = 0] = 1	// visited {1, 0, 0, 0}
			- dfs(4, 4, 1) 호출
				- depth 1 != 4이므로 출력 조건문 패스
				- i = 0 일 때
					- visited[i = 0] == 1이므로 pass
				- i = 1 일 때
					-visited[i = 1] != 1 이므로
						- combi[1] = arr[i = 1]	// combi {1, 2, 0, 0}
						- visited[i = 1] = 1	// visited {1, 1, 0, 0}
						- dfs(4, 4, 2) 호출
							- depth 2 != 4 이므로 출력 조건문 패스
							- i = 0, i = 1 패스
							- i = 2 일 때
								- visited[i = 2] != 1 이므로
									- combi[2] = arr[i = 2]	// combi {1, 2, 3, 0}
									- visited[ i =2] = 1	// visited {1, 1, 1, 0}
									- dfs (4, 4, 3) 호출
										- depth 3 != 4 이므로 출력 조건문 패스
										- i = 0 , i = 1, i = 2 패스
										- i = 3 일 때
											- visited[i = 3] != 1 이므로
												- combi[3] = arr[i = 3]	// combi {1, 2, 3, 4}
												- visited[ i = 3 ] = 1	// visited {1, 1, 1, 1}
												- dfs (4, 4, 4) 호출
													- depth == m 이라서 출력 후 종료
										- 반복문 끝남. visited {1, 1, 0, 0}
							- i = 3 일 때
								- visited [i = 3] != 1 이므로
									- combi[2] = arr[i= 3]	// combi { 1, 2, 4, 0}
									- visited[i = 3] = 1	// visited {1, 1, 0, 1}
									- dfs(4, 4, 3) 호출
										- depth 3 != 4 이므로 출력 조건문 패스
										- i = 0, i = 1 패스
										- i = 2 일 때
											- visited[i = 2] != 1이므로
												combi[3] = arr[i = 2]	// combi {1, 2, 4, 3}
												visited[i = 2] = 1	// visited { 1, 1, 1, 1}
												- dfs (4, 4, 4) 호출 -> 출력 후 종료
										- i = 3 일 때 패스
										- 반복문 끝남. visited {1, 1, 0, 0}
							- 반복문 끝남. visited { 1, 0, 0, 0}
				- i = 2 일 때
					- visited[i = 2] != 1 이므로
						- combi[1] = arr[i = 2]	// combi{1, 3, 0, 0}
						- visited[i = 2] = 1	// visited {1, 0, 1, 0}
						- dfs (4, 4, 2) 호출
							- depth 2 != 4 이므로 출력 조건문 패스
							- i = 0 패스
							- i = 1 일 때
								- visited[ i = 1 ] != 1 이므로
									- combi[2] = arr[i =1]	// combi {1, 3, 2, 0}
									- visited[ i = 1 ] = 1	// visited {1, 1, 1, 0}
									- dfs (4, 4, 3) 호출
										- depth 3 != 4 이므로 출력 조건문 패스
										- i = 0, i = 1, i = 2 패스
										- i = 3일 때
											- visited[i = 3] != 1이므로
												- combi[3] = arr[i = 3]	// combi {1, 3, 2, 4}
												- visited[i = 3] = 1	// visited {1, 1, 1, 1}
												- dfs (4, 4, 4) 호출 -> 출력 후 종료
										- 반복문 끝남. visited {1, 1, 0, 0}
										############### 여기서 오류 남 ###############
										# 반복문 초기화 이슈
										# 현재 depth가 3이고, combi [2] ~ [3] 에 든 숫자에
										# 해당하는 visited를 초기화 해줘야 함
										# ==> 하,,,,,,,,input 4 2 에서 에러남
										# 
										# 그냥 depth +1 해서 dfs 호출해주고 다시 나한테 돌아오면
										# visited 0으로 돌려줌
										##########################################
							- i = 2 일 때
								- visited [i = 2] != 1 이므로
									- combi[2] = arr[i = 2]	// combi {1, 3, 3, 0}

******************* visited 초기화 부분 이해 안 돼서 분석... ********************
dfs(4, 2, 0) 호출
	depth 0 != 2 이므로 출력 조건문 패스
	i = 0 일 때
		visited [i = 0] != 1
			combi [0] = arr[i = 0]	// combi {1, 0}
			visited[i = 0] = 1;	// visited {1, 0, 0, 0}
			dfs (4, 2, 1) 호출
				depth 1 != 2이므로 출력 조건문 패스
				i = 0 일 때
					visited [ i = 0 ] == 1
				i = 1 일 때
					visited [ i = 1 ] != 1
						combi[1] = arr[i = 1]	// combi {1, 2}
						visited[i = 1] = 1;		// visited {1, 1, 0, 0}
						dfs (4, 2, 2) 호출 => 출력 후 종료
						visted[ i = 1 ] = 0	// visited {1, 0, 0, 0}
				i = 2 일 때
					visited [i = 2] != 1
						combi[1] = arr[i = 2]	// combi {1,3}
						visited[i = 2] = 1		// visited {1, 0, 1, 0}
						dfs (4, 2, 2) 호출 => 출력 후 종료
						visited[i = 1] = 0		// visited {1, 0, 0, 0}
				i = 3 일 때
					visited [i = 3] != 1
						combi[1] = arr[i = 3]	// combi {1,4}
						visited[i = 3] =  1	// visited {1, 0, 0, 1}
						dfs (4, 2, 2) 호출 => 출력 후 종료
						visited[i = 1] = 0		// visited[1, 0, 0, 0}
			visited[i = 0] = 0	// visited {0, 0, 0, 0}
	i = 1 일 때
		visited [ i = 1 ] != 1
			combi [0] = arr[i = 1]	// combi {2, 1}
			visited [i = 1] = 1;	// visited {0, 1, 0, 0}
			dfs (4, 2, 1) 호출
				depth 1 != 2이므로 출력 조건문 패스
				i = 0 일 때
					visited [ i= 0 ] != 1
						combi[1] = arr[i = 0]	// combi {2, 1}
						visited[i = 0] = 1		// visited {1, 1, 0, 0}
						dfs (4, 2, 2) 호출 => 출력 후 종료
						visited[ i = 0 ] = 0	// visited {0, 1, 0, 0} 






